/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c ConfigurationIfAdaptor -a confifadaptor.h:confifadaptor.cpp -i genivi-dbus-types.h -i ConfigurationImpl.h -l ConfigurationImpl ../genivi-positioning-configuration-qt.xml org.genivi.positioning.Configuration
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "confifadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ConfigurationIfAdaptor
 */

ConfigurationIfAdaptor::ConfigurationIfAdaptor(ConfigurationImpl *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ConfigurationIfAdaptor::~ConfigurationIfAdaptor()
{
    // destructor
}

ushort ConfigurationIfAdaptor::satelliteSystem() const
{
    // get the value of property SatelliteSystem
    return qvariant_cast< ushort >(parent()->property("SatelliteSystem"));
}

void ConfigurationIfAdaptor::setSatelliteSystem(ushort value)
{
    // set the value of property SatelliteSystem
    parent()->setProperty("SatelliteSystem", QVariant::fromValue(value));
}

int ConfigurationIfAdaptor::updateInterval() const
{
    // get the value of property UpdateInterval
    return qvariant_cast< int >(parent()->property("UpdateInterval"));
}

void ConfigurationIfAdaptor::setUpdateInterval(int value)
{
    // set the value of property UpdateInterval
    parent()->setProperty("UpdateInterval", QVariant::fromValue(value));
}

QVariantMap ConfigurationIfAdaptor::GetProperties()
{
    // handle method call org.genivi.positioning.Configuration.GetProperties
    return parent()->GetProperties();
}

MapUShortVariant ConfigurationIfAdaptor::GetSupportedProperties()
{
    // handle method call org.genivi.positioning.Configuration.GetSupportedProperties
    return parent()->GetSupportedProperties();
}

GeniviVersion ConfigurationIfAdaptor::GetVersion()
{
    // handle method call org.genivi.positioning.Configuration.GetVersion
    return parent()->GetVersion();
}

void ConfigurationIfAdaptor::SetProperty(const QString &name, const QDBusVariant &value)
{
    // handle method call org.genivi.positioning.Configuration.SetProperty
    parent()->SetProperty(name, value);
}

